unit Service.Client;

interface

uses
  uDM, System.JSON, FireDAC.Comp.Client, FireDAC.DApt, FireDAC.Stan.Param;

type
  IServiceClient = interface
    ['{C2493EFB-240E-49E9-B00E-A0EC08D4D43A}']
    function FindAll(var iStatusCode: Integer): TJsonObject;
    function Insert(aBody: TJsonObject; var iStatusCode: Integer): TJsonObject;
    function Update(aBody: TJsonObject; var iStatusCode: Integer): TJsonObject;
    function Delete(aID: Integer; var iStatusCode: Integer): TJsonObject;
  end;

  TServiceClient = class(TInterfacedObject, IServiceClient)
  private
    FDM: TDM;
  public
    constructor Create;
    destructor Destroy; override;
    class function New: IServiceClient;
    function FindAll(var iStatusCode: Integer): TJsonObject;
    function Insert(aBody: TJsonObject; var iStatusCode: Integer): TJsonObject;
    function Update(aBody: TJsonObject; var iStatusCode: Integer): TJsonObject;
    function Delete(aID: Integer; var iStatusCode: Integer): TJsonObject;
  end;

implementation

uses
  System.SysUtils, Utils;

{ TServiceClient }

constructor TServiceClient.Create;
begin
  FDM := TDM.Create(nil);
end;

function TServiceClient.Delete(aID: Integer; var iStatusCode: Integer)
  : TJsonObject;
var
  Query: TFDQuery;
  JSONRoot: TJsonObject;
begin
  if aID > 0 then
  begin
    Query := FDM.GetQuery;

    try
      try
        JSONRoot := TJsonObject.Create;

        with Query do
        begin
          Sql.Add('delete from CLIENT where ID = :ID');
          ParamByName('ID').AsInteger := aID;
          ExecSQL;
        end;

        with JSONRoot do
        begin
          AddPair('statuscode', '200');
          AddPair('data', 'Cliente Deletado com Sucesso');
        end;

        iStatusCode := 200;
        Result := JSONRoot;

      except
        on E: Exception do
        begin
          JSONRoot := TJsonObject.Create;

          with JSONRoot do
          begin
            AddPair('statuscode', '400');
            AddPair('error', E.Message);
          end;
          iStatusCode := 400;
          Result := JSONRoot;
        end;
      end;
    finally
      Query.Free;
    end;

  end
  else
  begin
    JSONRoot := TJsonObject.Create;

    with JSONRoot do
    begin
      AddPair('statuscode', '400');
      AddPair('error', 'Nenhum valor encontrado');
    end;
    iStatusCode := 400;
    Result := JSONRoot;
  end;

end;

destructor TServiceClient.Destroy;
begin
  FDM.Free;
  inherited;
end;

function TServiceClient.FindAll(var iStatusCode: Integer): TJsonObject;
var
  Query: TFDQuery;
  JSONRoot, JSONClient: TJsonObject;
  JSONClients: TJSONArray;
begin

  Query := FDM.GetQuery;

  try
    try
      JSONClients := TJSONArray.Create;

      JSONRoot := TJsonObject.Create;

      with Query do
      begin
        Sql.Add('select * from clients');
        Open;
        FetchAll;
      end;

      while not Query.Eof do
      begin

        JSONClient := TJsonObject.Create;

        with JSONClient, Query do
        begin
          AddPair('id', TJSONNumber.Create(FieldByName('id').AsInteger));
          AddPair('name', FieldByName('name').AsString);

          JSONClients.AddElement(JSONClient);
        end;

        Query.Next;
      end;

      with JSONRoot do
      begin
        AddPair('statuscode', '200');
        AddPair('data', JSONClients);
      end;

      iStatusCode := 200;
      Result := JSONRoot;
      doPrintLog('Consultando Todos os Clientes.');
    except
      on E: Exception do
      begin

        JSONRoot := TJsonObject.Create;

        with JSONRoot do
        begin
          AddPair('statuscode', '400');
          AddPair('error', E.Message);
        end;
        iStatusCode := 400;
        Result := JSONRoot;
        doPrintLog('Erro ao Consultar Todos os Clientes.');
      end;

    end;
  finally
    Query.Free;
  end;
end;

function TServiceClient.Insert(aBody: TJsonObject; var iStatusCode: Integer)
  : TJsonObject;
var
  Query: TFDQuery;
  JSONRoot: TJsonObject;
begin
  if aBody <> nil then
  begin
    Query := FDM.GetQuery;

    try
      try
        JSONRoot := TJsonObject.Create;

        with Query do
        begin
          Sql.Add('insert into CLIENT (NAME) values(:NAME)');
          ParamByName('NAME').AsString := aBody.GetValue<string>('NAME');
          ExecSQL;
        end;

        with JSONRoot do
        begin
          AddPair('statuscode', '200');
          AddPair('data', 'Cliente Cadastrado com Sucesso');
        end;

        iStatusCode := 200;
        Result := JSONRoot;

      except
        on E: Exception do
        begin
          JSONRoot := TJsonObject.Create;

          with JSONRoot do
          begin
            AddPair('statuscode', '400');
            AddPair('error', E.Message);
          end;
          iStatusCode := 400;
          Result := JSONRoot;

        end;
      end;
    finally
      Query.Free;
    end;

  end
  else
  begin
    JSONRoot := TJsonObject.Create;

    with JSONRoot do
    begin
      AddPair('statuscode', '400');
      AddPair('error', 'Nenhum valor encontrado');
    end;
    iStatusCode := 400;
    Result := JSONRoot;
  end;

end;

class function TServiceClient.New: IServiceClient;
begin
  Result := Self.Create;
end;

function TServiceClient.Update(aBody: TJsonObject; var iStatusCode: Integer)
  : TJsonObject;
var
  Query: TFDQuery;
  JSONRoot: TJsonObject;
begin
  if aBody <> nil then
  begin
    Query := FDM.GetQuery;

    try
      try
        JSONRoot := TJsonObject.Create;

        with Query do
        begin
          Sql.Add('update CLIENT set NAME = :NAME where ID = :ID');
          ParamByName('NAME').AsString := aBody.GetValue<string>('NAME');
          ParamByName('ID').AsInteger := aBody.GetValue<Integer>('ID');
          ExecSQL;
        end;

        with JSONRoot do
        begin
          AddPair('statuscode', '200');
          AddPair('data', 'Cliente Alterado com Sucesso');
        end;

        iStatusCode := 200;
        Result := JSONRoot;

      except
        on E: Exception do
        begin
          JSONRoot := TJsonObject.Create;

          with JSONRoot do
          begin
            AddPair('statuscode', '400');
            AddPair('error', E.Message);
          end;
          iStatusCode := 400;
          Result := JSONRoot;
        end;
      end;
    finally
      Query.Free;
    end;

  end
  else
  begin
    JSONRoot := TJsonObject.Create;

    with JSONRoot do
    begin
      AddPair('statuscode', '400');
      AddPair('error', 'Nenhum valor encontrado');
    end;
    iStatusCode := 400;
    Result := JSONRoot;
  end;

end;

end.
